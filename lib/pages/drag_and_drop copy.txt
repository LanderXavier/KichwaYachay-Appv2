// Drag and drop
  List<Widget> _buildMatch(List<String> words, List<String> correctOrder) {
    List<String> availableWords = List.from(words); // Lista para las palabras disponibles
    List<String> draggedWords = []; // Lista para las palabras arrastradas
    List<String> correctOrde = List.from(correctOrder); // Lista para las palabras arrastradas

    return [
      const SizedBox(height: 20),
      const Text(
        'Une las palabras correctamente:',
        textAlign: TextAlign.center,
        style: TextStyle(fontSize: 16),
      ),
      const SizedBox(height: 20),

      // Lista de palabras que se pueden arrastrar
      Wrap(
        children: List<Widget>.generate(availableWords.length, (index) {
          return Draggable<String>(
            data: availableWords[index],
            feedback: Material(
              color: Colors.transparent,
              child: Container(
                width: 100,
                height: 100,
                alignment: Alignment.center,
                decoration: BoxDecoration(
                  color: Colors.blue[300],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  availableWords[index],
                  style: const TextStyle(color: Colors.black, fontSize: 20),
                ),
              ),
            ),
            childWhenDragging: Container(
              width: 100,
              height: 100,
              alignment: Alignment.center,
              margin: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                availableWords[index],
                style: const TextStyle(color: Colors.black, fontSize: 20),
              ),
            ),
            child: Container(
              key: Key(availableWords[index]),
              width: 100,
              height: 100,
              alignment: Alignment.center,
              margin: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue[200],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                availableWords[index],
                style: const TextStyle(color: Colors.black, fontSize: 20),
              ),
            ),
          );
        }).toList(),
      ),
      const SizedBox(height: 20),

      // Área de destino donde se arrastran las palabras
      Wrap(
        children: List<Widget>.generate(words.length, (index) {
          return DragTarget<String>(
            onAccept: (receivedWord) {
              if (!draggedWords.contains(receivedWord)) {
                draggedWords.add(receivedWord);
              }
            },
            builder: (context, candidateData, rejectedData) {
              return Container(
                width: 100,
                height: 100,
                alignment: Alignment.center,
                margin: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: candidateData.isNotEmpty ? Colors.green : Colors.black,
                    width: 2,
                  ),
                ),
                child: Text(
                  index < draggedWords.length ? draggedWords[index] : '',
                  style: const TextStyle(color: Colors.black, fontSize: 20),
                ),
              );
            },
          );
        }).toList(),
      ),

      const SizedBox(height: 20),

      // Botón para verificar el orden
      ElevatedButton(
        onPressed: () {
          bool isCorrect = draggedWords.length == correctOrder.length &&
              List.generate(correctOrder.length, (i) => draggedWords[i] == correctOrder[i])
                  .every((element) => element);
                    print("Palabras arrastradas: $draggedWords");
                    print("Orden correcto: $correctOrde");

          // Muestra el resultado
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text(isCorrect ? '¡Correcto!' : 'Inténtalo de nuevo'),
              content: Text(isCorrect
                  ? '¡Has ordenado correctamente las palabras!'
                  : 'El orden no es correcto. Por favor, inténtalo de nuevo.'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('OK'),
                ),
              ],
            ),
          );
        },
        child: const Text('Verificar'),
      ),
    ];
  }